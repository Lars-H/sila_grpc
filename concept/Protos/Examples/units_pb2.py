# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: units.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='units.proto',
  package='units',
  syntax='proto3',
  serialized_pb=_b('\n\x0bunits.proto\x12\x05units\"\x07\n\x05\x45mpty\"\x16\n\x06String\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t\"8\n\x0bObservation\x12\r\n\x05value\x18\x01 \x01(\x01\x12\x1a\n\x04unit\x18\x02 \x01(\x0e\x32\x0c.units.Units*/\n\x05Units\x12\x08\n\x04NONE\x10\x00\x12\t\n\x05GRAMM\x10\x01\x12\r\n\tKILOGRAMM\x10\x01\x1a\x02\x10\x01\x32\x39\n\x0ctest_service\x12)\n\x08get_name\x12\x0c.units.Empty\x1a\r.units.String\"\x00\x42 \n\rcl.grpc.unitsB\x05unitsP\x01\xa2\x02\x05unitsb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_UNITS = _descriptor.EnumDescriptor(
  name='Units',
  full_name='units.Units',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GRAMM', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='KILOGRAMM', index=2, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\020\001')),
  serialized_start=113,
  serialized_end=160,
)
_sym_db.RegisterEnumDescriptor(_UNITS)

Units = enum_type_wrapper.EnumTypeWrapper(_UNITS)
NONE = 0
GRAMM = 1
KILOGRAMM = 1



_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='units.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=29,
)


_STRING = _descriptor.Descriptor(
  name='String',
  full_name='units.String',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='units.String.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=53,
)


_OBSERVATION = _descriptor.Descriptor(
  name='Observation',
  full_name='units.Observation',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='units.Observation.value', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unit', full_name='units.Observation.unit', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=55,
  serialized_end=111,
)

_OBSERVATION.fields_by_name['unit'].enum_type = _UNITS
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['String'] = _STRING
DESCRIPTOR.message_types_by_name['Observation'] = _OBSERVATION
DESCRIPTOR.enum_types_by_name['Units'] = _UNITS

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'units_pb2'
  # @@protoc_insertion_point(class_scope:units.Empty)
  ))
_sym_db.RegisterMessage(Empty)

String = _reflection.GeneratedProtocolMessageType('String', (_message.Message,), dict(
  DESCRIPTOR = _STRING,
  __module__ = 'units_pb2'
  # @@protoc_insertion_point(class_scope:units.String)
  ))
_sym_db.RegisterMessage(String)

Observation = _reflection.GeneratedProtocolMessageType('Observation', (_message.Message,), dict(
  DESCRIPTOR = _OBSERVATION,
  __module__ = 'units_pb2'
  # @@protoc_insertion_point(class_scope:units.Observation)
  ))
_sym_db.RegisterMessage(Observation)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\rcl.grpc.unitsB\005unitsP\001\242\002\005units'))
_UNITS.has_options = True
_UNITS._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\020\001'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class test_serviceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_name = channel.unary_unary(
        '/units.test_service/get_name',
        request_serializer=Empty.SerializeToString,
        response_deserializer=String.FromString,
        )


class test_serviceServicer(object):

  def get_name(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_test_serviceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_name': grpc.unary_unary_rpc_method_handler(
          servicer.get_name,
          request_deserializer=Empty.FromString,
          response_serializer=String.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'units.test_service', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class Betatest_serviceServicer(object):
  def get_name(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class Betatest_serviceStub(object):
  def get_name(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  get_name.future = None


def beta_create_test_service_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('units.test_service', 'get_name'): Empty.FromString,
  }
  response_serializers = {
    ('units.test_service', 'get_name'): String.SerializeToString,
  }
  method_implementations = {
    ('units.test_service', 'get_name'): face_utilities.unary_unary_inline(servicer.get_name),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_test_service_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('units.test_service', 'get_name'): Empty.SerializeToString,
  }
  response_deserializers = {
    ('units.test_service', 'get_name'): String.FromString,
  }
  cardinalities = {
    'get_name': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'units.test_service', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
